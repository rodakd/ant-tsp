var v=Object.defineProperty;var tt=(L,b,I)=>b in L?v(L,b,{enumerable:!0,configurable:!0,writable:!0,value:I}):L[b]=I;var T=(L,b,I)=>(tt(L,typeof b!="symbol"?b+"":b,I),I);(function(){"use strict";const I=(s,t)=>{const e=s[0],r=t[0],h=s[1],m=t[1],S=6371e3,B=h*Math.PI/180,G=m*Math.PI/180,R=(m-h)*Math.PI/180,P=(r-e)*Math.PI/180,y=Math.sin(R/2)*Math.sin(R/2)+Math.cos(B)*Math.cos(G)*Math.sin(P/2)*Math.sin(P/2),N=2*Math.atan2(Math.sqrt(y),Math.sqrt(1-y));return S*N/1e3},q=(s,t)=>{let e=0;for(let r=0;r<t.length-1;r++){const h=t[r],m=t[r+1];e+=s[h][m]}return e+=s[t[t.length-1]][t[0]],e},K=s=>{const t=[];for(let e=0;e<s.length;e++){t[e]=[];for(let r=0;r<s.length;r++)t[e][r]=I(s[e],s[r])}return t},O=s=>{const t=[];for(let e=0;e<s;e++)t.push(e);return V(t)},H=(s,t)=>{const e=[];return s.forEach(r=>{e.push(t[r])}),e.push(t[s[0]]),e},z=s=>{const t=s.length,e=new Array(t).fill(-1);for(let r=0;r<t;r++)e[s[r]]=s[(r+1)%t];return e},Q=s=>{const t=s.length,e=new Array(t).fill(-1);let r=0;for(let h=0;h<t;h++)e[h]=r,r=s[r];return e},V=s=>{let t=s.length,e;for(;t!=0;)e=Math.floor(Math.random()*t),t--,[s[t],s[e]]=[s[e],s[t]];return s},X=s=>{const t=[];for(let e=0;e<s.length;e++){const r=s[e];let h=!0;for(let m=e+1;m<s.length;m++){const S=s[m];if(r[0]===S[0]&&r[1]===S[1]){h=!1;break}}h&&t.push(r)}return t.forEach(e=>{e[0]=Number(e[0].toFixed(6)),e[1]=Number(e[1].toFixed(6))}),t};function E(s){postMessage(s)}const Z=s=>{let t=new W;onmessage=async e=>{var h;if(!((h=e==null?void 0:e.data)!=null&&h.type))return;const r=e.data;switch(r.type){case"run":t=new W,t.params=r.params,t.markers=X(r.markers),t.speedPercent=r.speedPercent,t.iterationsLimit=r.iterationsLimit,t.performanceMode=r.performanceMode,s(t).catch(m=>{if(m!=="Stopped")throw m});break;case"stop":t.running=!1;break;case"pause":t.paused=!0;break;case"resume":t.paused=!1;break;case"changeSpeed":t.speedPercent=r.speedPercent}}};class W{constructor(){T(this,"bestTour",[]);T(this,"params",{});T(this,"markers",[]);T(this,"iteration",0);T(this,"paused",!1);T(this,"running",!0);T(this,"cost",1/0);T(this,"performanceMode",!1);T(this,"speedPercent",60);T(this,"iterationsLimit",null);T(this,"bestToursHistory",[]);T(this,"lastGetBestTour",null);T(this,"lastTourUpdate",0);T(this,"lastIterationUpdate",0);T(this,"helpers",{matrixCost(t,e){return q(t,e)},tourToSuccessors(t){return z(t)},successorsToTour(t){return Q(t)}})}getInput(){const t=K(this.markers),e=O(this.markers.length),r=q(t,e),h=this.markers.length,m=this.params;return this.updateBestTour(()=>e,r),{d:t,tour:e,cost:r,n:h,params:m}}async updateBestTour(t,e){if(e>=this.cost)return;this.cost=e;const r={cost:e,iteration:this.iteration};if(this.bestToursHistory.push(r),!this.shouldUpdateTour()){this.lastGetBestTour=t;return}this.bestTour=H(t(),this.markers),E({type:"updateBestTour",bestTour:this.bestTour,bestToursHistory:this.bestToursHistory,cost:this.cost}),await this.sleep()}async updateTrail(t){if(this.performanceMode)return;const e=H(t(),this.markers);E({type:"updateTrail",trail:e}),await this.sleep()}incrementIteration(){if(this.iteration++,this.iterationsLimit&&this.iteration>this.iterationsLimit)return this.iteration--,this.end();this.shouldUpdateIteration()&&E({type:"updateIteration",iteration:this.iteration})}async updateCurrentTour(t){if(this.performanceMode)return;const e=H(t(),this.markers);E({type:"updateCurrentTour",currentTour:e}),await this.sleep()}async sleep(){if(!this.running)throw"Stopped";if(this.performanceMode)return;for(;this.paused&&this.running;)await new Promise(e=>setTimeout(e,200));const t=500-this.speedPercent/100*500+50;return new Promise(e=>setTimeout(e,t))}log(t){E({type:"log",toLog:JSON.stringify(t)})}error(t){E({type:"error",text:t})}end(){let t=this.bestTour;throw this.lastGetBestTour&&(t=H(this.lastGetBestTour(),this.markers)),E({type:"end",cost:this.cost,bestTour:t,iterations:this.iteration,bestToursHistory:this.bestToursHistory}),this.running=!1,"Stopped"}shouldUpdateTour(){if(!this.performanceMode)return!0;const t=Date.now();return t-this.lastTourUpdate>3e3?(this.lastTourUpdate=t,!0):!1}shouldUpdateIteration(){if(!this.performanceMode)return!0;const t=Date.now();return t-this.lastIterationUpdate>3e3?(this.lastIterationUpdate=t,!0):!1}}async function $(s){function t(o,n){const l=n[0].length;for(let a=0;a<l;a++)for(let c=0;c<l;c++)n[a][c]=o;for(let a=0;a<l;a++)n[a][a]=0;return n}function e(o,n){return o=Math.ceil(o),n=Math.floor(n),Math.floor(Math.random()*(n-o+1)+o)}function r(o,n,l,a,c){if(o==n)l+=1,c=t(l,c);else for(let f=0;f<o.length;f++){const A=c[0].length;c[o[f]][o[(f+1)%A]]+=l,c[n[f]][n[(f+1)%A]]+=a}return[c,l]}function h(o,n,l){const a=n.length;for(let c=1;c<a-1;c++){let f=0;for(let M=c+1;M<a;M++)f+=l[n[c-1]][n[M]];const A=e(0,f-1);let d=c;for(f=l[n[c-1]][n[d]];f<A;)f+=l[n[c-1]][n[d+1]],d+=1;const j=n[d];n[d]=n[c],n[c]=j}return[n,s.helpers.matrixCost(o,n)]}async function m(o,n,l){let a=s.helpers.tourToSuccessors(n);const c=[];for(let i=0;i<P;i++){c[i]=[];for(let p=0;p<P;p++)c[i][p]=0}let f=0,A=0,d=0,j=!0,M=null;function J(i,p,C,U,u,_){for(i[_]=u;C!=U;){const w=C,g=i[p],D=p;i[p]=w,C=D,p=g}}for(;d!=A||j;){j=!1,f+=1;let i=a[d],p=l-o[d][i],C=!0;for(;C;){C=!1;let U=l,u=a[i],_=u;for(;a[u]!=d;){s.incrementIteration();const w=a[u];if(p-o[u][w]+o[u][d]+o[i][w]<l){_=u,U=p-o[u][w]+o[u][d]+o[i][w];break}c[u][w]!=f&&p+o[i][w]<U&&(U=p+o[i][w],_=u),u=w,await s.updateCurrentTour(()=>{const g=a.slice();return J(g,g[i],i,u,g[u],i),s.helpers.successorsToTour(g)})}if(Number(U.toFixed(7))<Number(l.toFixed(7))){C=!0,u=_,M=a[_],c[u][M]=c[M][u]=f,p+=o[i][M]-o[u][M];const w=i,g=a[i];J(a,g,w,u,M,i),i=u,p+o[d][i]<l&&(l=p+o[d][i],a[d]=i,A=i,j=!0,n=s.helpers.successorsToTour(a),await s.updateTrail(()=>n))}}a=s.helpers.tourToSuccessors(n),d=a[d]}return[n,l]}const S=s.getInput(),{d:B,params:{exploitation:G,loops:R}}=S,P=B[0].length;let y=S.tour,N=S.cost,x=1,k=0,Y=y.slice(),F=t(x,new Array(P).fill(new Array(P).fill(-1)));for(let o=0;o<R;o++)[y,k]=h(B,y,F),await s.updateTrail(()=>y),[y,k]=await m(B,y,k),Number(k.toFixed(7))<Number(N.toFixed(7))?(N=k,Y=y.slice(),x=1,F=t(x,F),await s.updateBestTour(()=>Y,N)):[F,x]=r(y,Y,x,G,F);s.end()}Z($)})();
